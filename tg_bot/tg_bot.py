import os
import time

import pytz
import telebot

from actions import commands
from actions.main_menu import schedule, reminders, main_menu
from actions.registration import student_registration, teacher_registration
from actions.search.prep_and_group_search import start_search, handler_buttons, search
from actions.search.aud_search import start_search_aud, handler_buttons_aud, handler_buttons_aud_all_results

from tg_bot.tools import keyboards
from tools.logger import logger
from db.mongo_storage import MongodbService

from tools import statistics

TG_TOKEN = os.environ.get('TG_TOKEN')

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

bot = telebot.TeleBot(TG_TOKEN)

storage = MongodbService().get_instance()

content_schedule = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è', '–≠–∫–∑–∞–º–µ–Ω—ã']

content_main_menu_buttons = ['–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', '<==–ù–∞–∑–∞–¥', '–î—Ä—É–≥–æ–µ ‚ö°']

content_students_registration = ['institute', 'course', 'group']
content_reminder_settings = [
    'notification_btn', 'del_notifications', 'add_notifications', 'save_notifications']
content_prep_group = ["found_prep", "prep_list"]
content_aud = ["search_aud", "menu_aud"]


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(func=lambda message: message.text in ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–°—Ç–∞—Ä—Ç', '—Å—Ç–∞—Ä—Ç', '/start', 'start'],
                     content_types=['text'])
def start_handler(message):
    commands.start(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /reg
@bot.message_handler(func=lambda message: message.text in ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '/reg', 'reg'],
                     content_types=['text'])
def registration_handler(message):
    commands.registration(bot=bot, message=message,
                          storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–º–æ—â—å', '–ø–æ–º–æ—â—å', '/help', 'help'], content_types=['text'])
def help_handler(message):
    commands.help_info(bot=bot, message=message,
                       storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /map –ö–∞—Ä—Ç–∞

@bot.message_handler(func=lambda message: message.text in ['–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', '/map', 'map'], content_types=['text'])
def map_handler(message):
    commands.show_map(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /about
@bot.message_handler(func=lambda message: message.text in ['–û –ø—Ä–æ–µ–∫—Ç–µ', '–æ –ø—Ä–æ–µ–∫—Ç–µ', '/about', 'about'],
                     content_types=['text'])
def about_handler(message):
    commands.about(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /authors
@bot.message_handler(func=lambda message: message.text in ['–ê–≤—Ç–æ—Ä—ã', '–∞–≤—Ç–æ—Ä—ã', '/authors', 'authors'],
                     content_types=['text'])
def authors_handler(message):
    commands.authors(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /tip
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–¥—Å–∫–∞–∑–∫–∞', '–ø–æ–¥—Å–∫–∞–∑–∫–∞', 'tip', '/tip'],
                     content_types=['text'])
def authors_handler(message):
    commands.tip(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ ==================== #
@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_students_registration))
def student_registration_handler(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    data = message.data
    if data == '{"institute": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"}':
        teacher_registration.start_prep_reg(
            bot=bot, message=message, storage=storage)
    else:
        student_registration.start_student_reg(
            bot=bot, message=message, storage=storage)
    logger.info(f'Inline button data: {data}')


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∏—Å–∫ üîé', content_types=['text'])
def reminders_info_handler(message):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å',
                     reply_markup=keyboards.make_keyboard_search_goal())


@bot.message_handler(func=lambda message: message.text == '–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏' or message.text == '–ê—É–¥–∏—Ç–æ—Ä–∏–∏',
                     content_types=['text'])
def reminders_info_handler(message):
    """–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞"""
    data = message.chat.id
    if message.text == "–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
        bot.send_message(chat_id=data, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º',
                         reply_markup=keyboards.make_keyboard_empty())
        start_search(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)
    else:
        bot.send_message(chat_id=data, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º',
                         reply_markup=keyboards.make_keyboard_empty())
        start_search_aud(bot=bot, message=message,
                         storage=storage, tz=TZ_IRKUTSK)
    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: 'prep_id' in message.data)
def prep_registration_handler(message):
    teacher_registration.reg_prep_choose_from_list(
        bot=bot, message=message, storage=storage)


@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_reminder_settings))
def reminder_settings_handler(message):
    data = message.data
    reminders.reminder_settings(
        bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)
    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_prep_group))
def prep_registration_handler(message):
    data = message.data
    handler_buttons(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)
    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_aud))
def prep_registration_handler(message):
    data = message.data
    handler_buttons_aud(bot=bot, message=message,
                        storage=storage, tz=TZ_IRKUTSK)
    logger.info(f'Inline button data: {data}')


@bot.message_handler(func=lambda message: message.text in content_schedule, content_types=['text'])
def schedule_handler(message):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    schedule.get_schedule(bot=bot, message=message,
                          storage=storage, tz=TZ_IRKUTSK)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£', content_types=['text'])
def reminders_info_handler(message):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminders.reminder_info(bot=bot, message=message,
                            storage=storage, tz=TZ_IRKUTSK)


@bot.message_handler(func=lambda message: message.text in content_main_menu_buttons, content_types=['text'])
def main_menu_buttons_handler(message):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    main_menu.processing_main_buttons(
        bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(message):
    data = message.data
    if data != 'None':
        handler_buttons_aud_all_results(
            bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)
        logger.info(f'Inline button data: {data}')


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ==================== #
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text
    user = storage.get_user(chat_id=chat_id)
    logger.info(f'Message data: {data}')

    if user:
        bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû\n'
                                       '–î–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [–ü–æ–¥—Å–∫–∞–∑–∫–∞]\n'
                                       '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [–ü–æ–º–æ—â—å]\n',
                         reply_markup=keyboards.make_keyboard_start_menu())
    else:
        bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû\n'
                                       '–ü–æ—Ö–æ–∂–µ –í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n'
                                       '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µüôè')

    statistics.add(action='bullshit', storage=storage, tz=TZ_IRKUTSK)


if __name__ == '__main__':
    bot.remove_webhook()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    while True:
        try:
            bot.infinity_polling(none_stop=True)
        except Exception as e:
            logger.error(e)
            time.sleep(3)
