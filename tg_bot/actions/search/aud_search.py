import json

from keyboa import Keyboa

from tools.tg_tools import keyboards, schedule_processing

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è(—Å–ª–æ–≤–∞—Ä—å), –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ 3 —Å–æ—Å—Ç–æ—è–Ω–∏—è
# (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã; —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏–º; —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ —É—Å–ª–æ–≤–∏—é –≤ —Å—Ç–µ–π—Ç–µ)
aud_list = {}


def start_search_aud(bot, message, storage, tz):
    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = message.chat.id
    # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    aud_list[chat_id] = []
    # –ó–∞—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã
    user = storage.get_user(chat_id=chat_id)
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ

    if user:

        # –ó–∞–ø—É—Å–∫ —Å—Ç–µ–π—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º SEARCH
        msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∞—É–¥–∏—Ç—Ä–∏—é\n'
                                                     '–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ-317, –∏–ª–∏ –ñ317',
                               reply_markup=keyboards.make_keyboard_main_menu())

        bot.register_next_step_handler(msg, search_aud, bot=bot, tz=tz, storage=storage)

    else:

        bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç\n')
        bot.send_message(chat_id=chat_id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
        bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                         reply_markup=keyboards.make_inline_keyboard_choose_institute(storage.get_institutes()))


def search_aud(message, bot, storage, tz, last_msg=None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    global aud_list
    chat_id = message.chat.id
    message_id = message.message_id
    data = message
    message = message.text
    all_found_aud = []
    all_results = []
    prep_list = []
    page = 0

    if data.content_type == 'sticker':
        message = ''

    if last_msg:
        bot.delete_message(data.chat.id, data.message_id - 1)

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == message or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == message):
        return

    if not storage.get_schedule_aud(message) and len(message.replace(' ', '')) < 15:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
        for item in message:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            request_item_all = storage.get_schedule_aud(item)
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for i in range(len(request_item_all)):
                # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–ª—é—á "aud"
                request_item = request_item_all[i]['aud']
                # –ó–∞–ø–∏—Å—ã–≤–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ó–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ "aud")
                prep_list.append(request_item)
                request_item = []

            request_item_all = []

        # –í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤(–∞). –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        qty_most_common = 0
        prep_list_set = set(prep_list)
        for item in prep_list_set:
            qty = prep_list.count(item)
            if qty > qty_most_common:
                qty_most_common = qty
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if message.replace(' ', '').lower() in item.replace('-', '').lower():
                all_results.append(item.lower())

    if storage.get_schedule_aud(message) and not all_results:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∞—É–¥–∞–º
        request_aud = storage.get_schedule_aud(message)
        # –¶–∏–∫–ª—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞. –ó–¥–µ—Å—å –º—ã —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∫–≤–µ—Å—Ç–∞—Ö –∏ —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –æ–±—â–∏–π –∫–ª—é—á, –∫–∞–∫ –¥–ª—è –≥—Ä—É–ø–ø, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
        for i in request_aud:
            i['search_aud'] = i.pop('aud')
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ–º
        request_word = message

        last_request = request_aud[-1]
        # –≠—Ç–∏ —Ü–∏–∫–ª—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏
        for i in request_aud:
            all_found_aud.append(i['search_aud'].lower())
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –±–∞–≥–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        list_search = [page, request_word, all_found_aud]
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        aud_list[chat_id] = list_search
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–∫–ª–∏–≤–∏–∞—Ç—É—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É)
        if len(request_aud) > 10:
            requests = request_aud[:10 * (page + 1)]
            more_than_10 = True
            msg = bot.send_message(chat_id=chat_id, text='–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞',
                                   reply_markup=keyboards.make_keyboard_search_group_aud(last_request=last_request,
                                                                                         page=page,
                                                                                         more_than_10=more_than_10,
                                                                                         requests=requests))
            bot.register_next_step_handler(msg, search_aud, bot=bot, storage=storage, tz=tz, last_msg=msg)

        else:
            msg = bot.send_message(chat_id=chat_id, text='–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞',
                                   reply_markup=keyboards.make_keyboard_search_group_aud(last_request=last_request,
                                                                                         page=page,
                                                                                         more_than_10=False,
                                                                                         requests=request_aud))
            bot.register_next_step_handler(msg, search_aud, bot=bot, storage=storage, tz=tz, last_msg=msg)

    if all_results and aud_list[chat_id] == []:
        all_found_aud = all_results
        request_word = data
        list_search = [page, request_word, all_found_aud]
        aud_list[chat_id] = list_search
        kb_all_results = Keyboa(items=all_found_aud, copy_text_to_callback=True, items_in_row=3)

        msg = bot.send_message(
            chat_id=chat_id, reply_markup=kb_all_results,
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞")

        bot.register_next_step_handler(msg, search_aud, bot=bot, storage=storage, tz=tz, last_msg=msg)



    else:
        if len(aud_list[chat_id]) == 3:
            pass
        elif all_results:
            kb_all_results = Keyboa(items=all_found_aud, copy_text_to_callback=True, items_in_row=3)
            bot.send_message(
                chat_id=chat_id, reply_markup=kb_all_results,
                text="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞")
        else:
            msg = bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ üòï',
                                   reply_markup=keyboards.make_keyboard_main_menu())
            bot.register_next_step_handler(msg, search_aud, bot=bot, storage=storage, tz=tz, last_msg=msg)
            return

    return


def handler_buttons_aud(bot, message, storage, tz):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    global aud_list

    chat_id = message.message.chat.id
    message_id = message.message.message_id
    data = json.loads(message.data)
    all_found_aud = []

    if data['menu_aud'] == 'main':
        bot.send_message(chat_id=chat_id, text='–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø–æ–∏—Å–∫',
                         reply_markup=keyboards.make_keyboard_start_menu())
        bot.delete_message(chat_id, message_id)
        bot.clear_step_handler_by_chat_id(chat_id=chat_id)

        return

    if not aud_list[chat_id] and len(aud_list[chat_id]) != 0:
        aud_list[chat_id][1] = ''

    page = aud_list[chat_id][0]

    request_aud = storage.get_schedule_aud(aud_list[chat_id][1])
    # –¶–∏–∫–ª—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞. –ó–¥–µ—Å—å –º—ã —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∫–≤–µ—Å—Ç–∞—Ö –∏ —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –æ–±—â–∏–π –∫–ª—é—á, –∫–∞–∫ –¥–ª—è –≥—Ä—É–ø–ø, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
    for i in request_aud:
        i['search_aud'] = i.pop('aud')
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ–º
    request_word = aud_list[chat_id][1]
    last_request = request_aud[-1]
    # –≠—Ç–∏ —Ü–∏–∫–ª—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏
    for i in request_aud:
        all_found_aud.append(i['search_aud'].lower())
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –±–∞–≥–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    list_search = [page, request_word, all_found_aud]
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    aud_list[chat_id] = list_search

    if data['menu_aud'].lower() in aud_list[chat_id][2]:
        bot.delete_message(message_id=message_id, chat_id=chat_id)
        aud_list[chat_id][1] = data['menu_aud'].lower()
        des = message.data.split(":")[1].replace("}", "").replace('"', '')
        msg = bot.send_message(chat_id=chat_id,
                               text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏{des}',
                               reply_markup=keyboards.make_keyboard_choose_schedule_for_aud_search())
        bot.register_next_step_handler(msg, choose_week, bot=bot, storage=storage, tz=tz, last_msg=msg)



    elif data['menu_aud'] == 'back':
        more_than_10 = False
        if len(request_aud) > 10:
            requests = request_aud[10 * (page - 1):10 * page]
            more_than_10 = True

        if aud_list[chat_id][0] - 1 == 0:
            bot.delete_message(message_id=message_id, chat_id=chat_id)
            bot.send_message(chat_id=chat_id, text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞',
                             reply_markup=keyboards.make_keyboard_search_group_aud(last_request=last_request,
                                                                                   page=page - 1,
                                                                                   requests=requests,
                                                                                   more_than_10=more_than_10))

        else:
            bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                          reply_markup=keyboards.make_keyboard_search_group_aud(
                                              last_request=last_request,
                                              page=page - 1,
                                              requests=requests,
                                              more_than_10=more_than_10))
        aud_list[chat_id][0] -= 1

    elif data['menu_aud'] == 'next':
        bot.delete_message(message_id=message_id, chat_id=chat_id)
        more_than_10 = False
        if len(request_aud) > 10:
            requests = request_aud[10 * (page + 1):10 * (page + 2)]
            more_than_10 = True
        bot.send_message(chat_id=chat_id, text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞',
                         reply_markup=keyboards.make_keyboard_search_group_aud(last_request=last_request,
                                                                               page=page + 1,
                                                                               requests=requests,
                                                                               more_than_10=more_than_10))
        aud_list[chat_id][0] += 1



    else:
        msg = bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ üòû',
                               reply_markup=keyboards.make_keyboard_main_menu())
        bot.register_next_step_handler(msg, search_aud, bot=bot, storage=storage, tz=tz, last_msg=msg)


def choose_week(message, bot, storage, tz, last_msg=None):
    global aud_list
    chat_id = message.chat.id
    message = message.text

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == message or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == message):
        request_word = aud_list[chat_id][1]

        request_aud = storage.get_schedule_aud(request_word)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞
        schedule = request_aud[0]

        if not schedule:
            schedule_processing.sending_schedule_is_not_available_search(message=message, chat_id=chat_id, bot=bot)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if message == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'
        aud = request_word
        schedule_str = full_schedule_in_str_prep(schedule, week=week, aud=aud)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(schedule_str, APIError):
            schedule_processing.sending_schedule_is_not_available(bot=bot, chat_id=chat_id)
            return

        bot.send_message(chat_id=chat_id, text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {request_word}\n'
                                               f'–ù–µ–¥–µ–ª—è: {week_name}',
                         reply_markup=keyboards.make_keyboard_start_menu())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_processing.sending_schedule(bot=bot, chat_id=chat_id, schedule_str=schedule_str)

        bot.clear_step_handler_by_chat_id(chat_id=chat_id)


def handler_buttons_aud_all_results(bot, message, storage, tz):
    chat_id = message.message.chat.id
    message_id = message.message.message_id
    data = message.data

    if data.lower() in aud_list[chat_id][2]:
        bot.delete_message(message_id=message_id, chat_id=chat_id)
        aud_list[chat_id][1] = data.lower()
        msg = bot.send_message(chat_id=chat_id,
                               text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏{data}',
                               reply_markup=keyboards.make_keyboard_choose_schedule())
        bot.register_next_step_handler(msg, choose_week, bot=bot, storage=storage, tz=tz, last_msg=msg)

    else:
        return
