from datetime import datetime

from db.mongo_storage import MongodbService
from tools.schedule_tools import find_week, near_lesson, creating_schedule
from tools.tg_tools import keyboards, schedule_processing
from tools import statistics


storage = MongodbService().get_instance()


def groups_exam(group):
    schedule = storage.get_schedule_exam(group=group)
    if not schedule:
        return 0
    del schedule['_id']
    clear_list = []
    for i in range(len(schedule['exams']['exams'])):
        if schedule['exams']['exams'][i] not in clear_list:
            clear_list.append(schedule['exams']['exams'][i])
    schedule['exams']['exams'] = clear_list
    return schedule


def get_schedule(bot, message, storage, tz):
    chat_id = message.chat.id
    data = message.text
    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì' == data and user.get('group'):
        bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n',
                         reply_markup=keyboards.make_keyboard_choose_schedule())
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', storage=storage, tz=tz)

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule or schedule['schedule'] == []:
            bot.send_message(
                chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            statistics.add(action=data, storage=storage, tz=tz)
            return

        schedule = schedule['schedule']
        week = find_week.find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_str = creating_schedule.full_schedule_in_str(schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_str = creating_schedule.full_schedule_in_str_prep(schedule, week=week)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(schedule_str, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        bot.send_message(chat_id=chat_id, text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                                               f'–ù–µ–¥–µ–ª—è: {week_name}',
                         reply_markup=keyboards.make_keyboard_start_menu())
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_processing.sending_schedule(
            bot=bot, chat_id=chat_id, schedule_str=schedule_str)

        statistics.add(action=data, storage=storage, tz=tz)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            bot.send_message(chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                                                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                           storage=storage, tz=tz)
            return
        schedule = schedule['schedule']
        week = find_week()
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_one_day = creating_schedule.get_one_day_schedule_in_str(
                schedule=schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_one_day = creating_schedule.get_one_day_schedule_in_str_prep(
                schedule=schedule, week=week)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(schedule_one_day, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        if not schedule_one_day:
            bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        bot.send_message(chat_id=chat_id, text=f'{schedule_one_day}')
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', storage=storage, tz=tz)

    elif '–≠–∫–∑–∞–º–µ–Ω—ã' in data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = groups_exam(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = groups_exam(group=group)

        if not schedule:
            bot.send_message(chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Çüòá\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–≠–∫–∑–∞–º–µ–Ω—ã', storage=storage, tz=tz)
            return

        # schedule = schedule['schedule']

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_exams = creating_schedule.schedule_view_exams(schedule=schedule)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_exams = creating_schedule.schedule_view_exams(schedule=schedule)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(schedule_exams, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)

            return

        schedule_processing.sending_schedule(
            bot=bot, chat_id=chat_id, schedule_str=schedule_exams)

        statistics.add(action='–≠–∫–∑–∞–º–µ–Ω—ã', storage=storage, tz=tz)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            bot.send_message(chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                                                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                           storage=storage, tz=tz)
            return
        schedule = schedule['schedule']
        week = find_week()
        if datetime.today().isoweekday() == 7:
            if week == 'odd':
                week = 'even'
            elif week == 'even':
                week = 'odd'
            else:
                week = 'all'

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_next_day = creating_schedule.get_next_day_schedule_in_str(
                schedule=schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_next_day = creating_schedule.get_next_day_schedule_in_str_prep(
                schedule=schedule, week=week)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(schedule_next_day, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        if not schedule_next_day:
            bot.send_message(chat_id=chat_id, text='–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        bot.send_message(chat_id=chat_id, text=f'{schedule_next_day}')
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', storage=storage, tz=tz)

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±' in data and user.get('group'):
        bot.send_message(chat_id=chat_id, text='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞',
                         reply_markup=keyboards.make_keyboard_nearlesson())
        statistics.add(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', storage=storage, tz=tz)
        return

    elif '–¢–µ–∫—É—â–∞—è' in data and user.get('group'):
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            bot.send_message(chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                                                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=tz)
            return
        schedule = schedule['schedule']
        week = find_week()

        now_lessons = near_lesson.get_now_lesson(schedule=schedule, week=week)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(now_lessons, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            bot.send_message(chat_id=chat_id, text='–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=tz)
            return

        # –°—Ç—É–¥–µ–Ω—Ç
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            now_lessons_str = creating_schedule.get_now_lesson_in_str_stud(now_lessons)

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            now_lessons_str = creating_schedule.get_now_lesson_in_str_prep(now_lessons)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(now_lessons_str, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        bot.send_message(chat_id=chat_id, text=f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'f'{now_lessons_str}',
                         reply_markup=keyboards.make_keyboard_start_menu())

        statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=tz)

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user.get('group'):
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            bot.send_message(chat_id=chat_id, text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                                                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=tz)
            return
        schedule = schedule['schedule']
        week = find_week()

        near_lessons = near_lesson.get_near_lesson(schedule=schedule, week=week)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(near_lessons, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=tz)
            return

        # –°—Ç—É–¥–µ–Ω—Ç
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            near_lessons_str = creating_schedule.get_now_lesson_in_str_stud(near_lessons)

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            near_lessons_str = creating_schedule.get_now_lesson_in_str_prep(near_lessons)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
        if isinstance(near_lessons_str, None):
            schedule_processing.sending_schedule_is_not_available(
                bot=bot, chat_id=chat_id)
            return

        bot.send_message(chat_id=chat_id, text=f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}',
                         reply_markup=keyboards.make_keyboard_start_menu())

        statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=tz)
