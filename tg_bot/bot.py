import os
import time

import pytz
from dotenv import load_dotenv
from telebot import TeleBot

from db.mongo_storage import MongodbService
from tg_bot.actions import commands
from tg_bot.actions.registration import student as student_registration
from tg_bot.actions.registration import teacher as teacher_registration
from tools.logger import logger
from tools.messages import error_messages

load_dotenv()

TOKEN = os.environ.get('TG_TOKEN')
TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

bot = TeleBot(token=TOKEN)

storage = MongodbService().get_instance()

content_schedule = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è', '–≠–∫–∑–∞–º–µ–Ω—ã']

content_main_menu_buttons = ['–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', '<==–ù–∞–∑–∞–¥', '–î—Ä—É–≥–æ–µ ‚ö°']

content_students_registration = ['institute', 'course', 'group']
content_reminder_settings = [
    'notification_btn', 'del_notifications', 'add_notifications', 'save_notifications']
content_prep_group = ["found_prep", "prep_list"]
content_aud = ["search_aud", "menu_aud"]


# Commands

# /start
@bot.message_handler(
    func=lambda message: message.text in ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–°—Ç–∞—Ä—Ç', '—Å—Ç–∞—Ä—Ç', '/start', 'start'],
    content_types=['text'])
def start_handler(message):
    commands.start(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# /reg
@bot.message_handler(func=lambda message: message.text in ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '/reg', 'reg'],
                     content_types=['text'])
def registration_handler(message):
    commands.registration(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# /help
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–º–æ—â—å', '–ø–æ–º–æ—â—å', '/help', 'help'],
                     content_types=['text'])
def help_handler(message):
    commands.help(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# /about
@bot.message_handler(func=lambda message: message.text in ['–û –ø—Ä–æ–µ–∫—Ç–µ', '–æ –ø—Ä–æ–µ–∫—Ç–µ', '/about', 'about'],
                     content_types=['text'])
def about_handler(message):
    commands.about(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# /map
@bot.message_handler(func=lambda message: message.text in ['–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', '/map', 'map'],
                     content_types=['text'])
def map_handler(message):
    commands.show_map(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# /authors
@bot.message_handler(func=lambda message: message.text in ['–ê–≤—Ç–æ—Ä—ã', '–∞–≤—Ç–æ—Ä—ã', '/authors', 'authors'],
                     content_types=['text'])
def authors_handler(message):
    commands.authors(
        bot=bot,
        message=message,
        storage=storage,
        time_zone=TZ_IRKUTSK
    )


# Inline buttons handlers

# Registration
@bot.callback_query_handler(func=lambda message: 'registration' in message.data)
def registration_handler(message):
    data = message.data

    if data == '{"registration": "student"}':
        student_registration.start_student_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å id —á–∞—Ç–∞
    elif data == '{"registration": "teacher"}':
        teacher_registration.start_teacher_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å id —á–∞—Ç–∞
    elif data == '{"registration": "back"}':
        commands.registration(
            bot=bot,
            message=message.message,
            storage=storage,
            time_zone=TZ_IRKUTSK,
            edit=True
        )

        # —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: 'institute' in message.data)
def institute_registration_handler(message):
    data = message.data

    if data == '{"institute": "back"}':
        student_registration.start_student_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # —É–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏–∑ –º–æ–Ω–≥–æ
    else:
        student_registration.select_course_student_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Å—Ç–∏—Ç—É—Ç –≤ –º–æ–Ω–≥–æ

    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: 'course' in message.data)
def course_registration_handler(message):
    data = message.data

    if data == '{"course": "back"}':
        student_registration.select_course_student_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å –∏–∑ –º–æ–Ω–≥–æ
    else:
        student_registration.select_group_student_registration(
            bot=bot,
            message=message,
            storage=storage
        )

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤ –º–æ–Ω–≥–æ

    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: 'group' in message.data)
def group_registration_handler(message):
    data = message.data

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –º–æ–Ω–≥–æ

    logger.info(f'Inline button data: {data}')


# Search
@bot.message_handler(
    func=lambda message: message.text == '–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏' or message.text == '–ê—É–¥–∏—Ç–æ—Ä–∏–∏',
    content_types=['text'])
def reminders_info_handler(message):
    data = message.chat.id
    if message.text == "–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏":
        # Clear keyboard
        # Start search
        pass
    elif message.text == '–ê—É–¥–∏—Ç–æ—Ä–∏–∏':
        # Clear keyboard
        # Start search
        pass
    logger.info(f'Inline button data: {data}')


# Reminder settings
@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_reminder_settings))
def reminder_settings_handler(message):
    data = message.data
    # Open settings
    logger.info(f'Inline button data: {data}')


# Schedule
@bot.message_handler(func=lambda message: message.text in content_schedule, content_types=['text'])
def schedule_handler(message):
    # Send schedule
    pass


# Reminders
@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£', content_types=['text'])
def reminders_info_handler(message):
    # Send reminders info
    pass


# Main buttons
@bot.message_handler(func=lambda message: message.text in content_main_menu_buttons, content_types=['text'])
def main_menu_buttons_handler(message):
    # Send main buttons
    pass


# Text handler
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text
    user = storage.get_tg_user(chat_id=chat_id)
    logger.info(f'Message data: {data}')

    if user:
        # Clear keyboard
        bot.send_message(chat_id, text=error_messages['wrong_command'])
    else:
        bot.send_message(chat_id, text=error_messages['registration_not_finished'])


if __name__ == '__main__':
    bot.remove_webhook()
    logger.info('Bot started!')
    while True:
        try:
            bot.infinity_polling(none_stop=True)
        except Exception as e:
            logger.error(e)
            time.sleep(3)
