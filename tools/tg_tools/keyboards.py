from telebot import types
import json

MAX_CALLBACK_RANGE = 41


def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì')
    btn2 = types.KeyboardButton('–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±')
    btn3 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè')
    btn4 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé')
    btn5 = types.KeyboardButton('–ü–æ–∏—Å–∫ üîé')
    btn6 = types.KeyboardButton('–î—Ä—É–≥–æ–µ ‚ö°')
    markup.add(btn1, btn2)
    markup.add(btn3)
    markup.add(btn4)
    markup.add(btn5, btn6)
    return markup

def make_keyboard_search_goal():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
    btn2 = types.KeyboardButton('–ê—É–¥–∏—Ç–æ—Ä–∏–∏')
    btn3 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    return markup

def make_keyboard_empty():
    markup = types.ReplyKeyboardRemove()
    return markup


def make_inline_keyboard_choose_institute(institutes=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    markup = types.InlineKeyboardMarkup()
    data = '{"institute": "' + "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" + '"}'
    markup.add(types.InlineKeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', callback_data=data))
    for institute in institutes:
        name = institute['name']
        short_name = name
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É callback_data
        callback_body = '{"institute": ""}'
        if len(name + callback_body) > MAX_CALLBACK_RANGE:
            short_name = name[:MAX_CALLBACK_RANGE - len(callback_body)]

        data = '{"institute": "' + short_name + '"}'

        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))
    return markup


def make_inline_keyboard_choose_courses(courses=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    markup = types.InlineKeyboardMarkup()
    for course in courses:
        name = course['name']
        data = '{"course":"' + name + '"}'
        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    data = json.dumps({"course": "back"})
    markup.add(types.InlineKeyboardButton(text='<', callback_data=data))
    return markup



def make_inline_keyboard_choose_groups(groups=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    markup = types.InlineKeyboardMarkup()
    for group in groups:
        name = group['name']
        data = json.dumps({"group": name})
        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    data = json.dumps({"group": "back"})
    markup.add(types.InlineKeyboardButton(text='<', callback_data=data))
    return markup


def make_inline_keyboard_reg_prep(preps=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    markup = types.InlineKeyboardMarkup()
    for prep in preps:
        name = prep['prep']
        prep_id = prep['pg_id']
        data = json.dumps({"prep_id": prep_id})
        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    data = json.dumps({"prep_id": "back"})
    markup.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', callback_data=data))
    return markup


def make_inline_keyboard_notifications(time=0):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    markup = types.InlineKeyboardMarkup()
    data = json.dumps({"notification_btn": time})
    markup.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', callback_data=data))
    data = json.dumps({"notification_btn": "close"})
    markup.add(types.InlineKeyboardButton(text='–°–≤–µ—Ä–Ω—É—Ç—å', callback_data=data))
    return markup


def make_keyboard_main_menu():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é """
    markup = types.InlineKeyboardMarkup()
    data = json.dumps({'prep_list': 'main'})
    markup.add(types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=data))
    return markup


def make_keyboard_search_group(last_request, page, more_than_10=False, requests=[]):
    markup = types.InlineKeyboardMarkup()
    for request in requests:
        name = request['found_prep']
        data = json.dumps({"prep_list": name}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if page == 0:
        if more_than_10:
            data = json.dumps({"prep_list": "next"}, ensure_ascii=False)
            markup.add(types.InlineKeyboardButton(text='>', callback_data=data))
        data = json.dumps({"prep_list": "main"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=data))
    elif last_request == requests[-1]:
        data = json.dumps({"prep_list": "back"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='<', callback_data=data))
    else:
        data_next = json.dumps({"prep_list": "next"}, ensure_ascii=False)
        data_back = json.dumps({"prep_list": "back"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='<', callback_data=data_back),
                   types.InlineKeyboardButton(text='>', callback_data=data_next))
    return markup

def make_keyboard_search_group_aud(last_request, page, more_than_10=False, requests=[]):
    markup = types.InlineKeyboardMarkup()
    for request in requests:
        name = request['search_aud']
        data = json.dumps({"menu_aud": name}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text=name, callback_data=data))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if page == 0:
        if more_than_10:
            data = json.dumps({"menu_aud": "next"}, ensure_ascii=False)
            markup.add(types.InlineKeyboardButton(text='>', callback_data=data))
        data = json.dumps({"menu_aud": "main"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=data))
    elif last_request == requests[-1]:
        data = json.dumps({"menu_aud": "back"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='<', callback_data=data))
    else:
        data_next = json.dumps({"menu_aud": "next"}, ensure_ascii=False)
        data_back = json.dumps({"menu_aud": "back"}, ensure_ascii=False)
        markup.add(types.InlineKeyboardButton(text='<', callback_data=data_back),
                   types.InlineKeyboardButton(text='>', callback_data=data_next))
    return markup



def make_inline_keyboard_set_notifications(time=0):
    """–∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    markup = types.InlineKeyboardMarkup()
    data_del = json.dumps({"del_notifications": time})
    if time != 0:
        text_check = f'{time} –º–∏–Ω'
    else:
        text_check = 'off'
    data_add = json.dumps({"add_notifications": time})
    markup.add(types.InlineKeyboardButton(text='-', callback_data=data_del),
               types.InlineKeyboardButton(text=text_check, callback_data='None'),
               types.InlineKeyboardButton(text='+', callback_data=data_add))
    # –ö–Ω–æ–ø–∫–∞ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    data_save = json.dumps({"save_notifications": time})
    markup.add(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=data_save))
    return markup


def make_inline_keyboard_choose_week():
    """–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á–µ—Ç–Ω–æ–π , –Ω–µ—á–µ—Ç–Ω–æ–π –∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ß–µ—Ç–Ω–∞—è', callback_data='odd'),
               types.InlineKeyboardButton(text='–ù–µ—á–µ—Ç–Ω–∞—è', callback_data='even'))
    markup.add(types.InlineKeyboardButton(text='–¢–µ–∫—É—â–∞—è', callback_data='week_now'))
    return markup


def make_keyboard_choose_schedule():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ —Å–ª—É–¥—É—é—â—É—é + —ç–∫–∑–∞–º–µ–Ω—ã"""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é')
    btn2 = types.KeyboardButton('–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
    btn3 = types.KeyboardButton('–≠–∫–∑–∞–º–µ–Ω—ã')
    btn4 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    markup.add(btn3)
    markup.add(btn4)
    return markup

def make_keyboard_choose_schedule_for_aud_search():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –Ω–∞ —Å–ª—É–¥—É—é—â—É—é"""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é')
    btn2 = types.KeyboardButton('–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
    btn4 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    markup.add(btn4)
    return markup

def make_keyboard_extra():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –î—Ä—É–≥–æ–µ ‚ö° """
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    btn2 = types.KeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£')
    btn3 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    return markup


def make_keyboard_commands():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥"""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–ê–≤—Ç–æ—Ä—ã')
    btn2 = types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    btn3 = types.KeyboardButton('–ö–∞—Ä—Ç–∞')
    btn4 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1)
    markup.add(btn2, btn3)
    markup.add(btn4)
    return markup


def make_keyboard_nearlesson():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ –ë–ª–∏–∂–∞–π—à–µ–π –ø–∞—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn1 = types.KeyboardButton('–¢–µ–∫—É—â–∞—è')
    btn2 = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è')
    btn3 = types.KeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(btn1, btn2)
    markup.add(btn3)
    return markup
