import json

from vkbottle import Keyboard, KeyboardButtonColor, Text

MAX_CALLBACK_RANGE = 41


def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    text = text.replace('\n', " ")
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def start_button():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å'"""
    keyboard = Keyboard(one_time=False)
    keyboard.schema(
        [
            [
                {"label": "–ù–∞—á–∞—Ç—å", "type": "text", "color": "positive", "payload": "1"},
            ],
        ]
    )
    return keyboard


def make_inline_keyboard_notifications():
    """ –ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' """
    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label='<==–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.SECONDARY)
    keyboard.schema(
        [
            [
                {"label": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "<==–ù–∞–∑–∞–¥", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_start_menu():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é """
    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.add(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè"), color=KeyboardButtonColor.SECONDARY)
    # keyboard.row()
    # keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé"), color=KeyboardButtonColor.SECONDARY)
    # keyboard.row()
    # keyboard.add(Text(label="–ü–æ–∏—Å–∫ üîé"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.add(Text(label="–î—Ä—É–≥–æ–µ ‚ö°"), color=KeyboardButtonColor.PRIMARY)
    # print(keyboard)
    keyboard.schema(
        [
            [
                {"label": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì", "type": "text", "color": "primary", "payload": "1"},
                {"label": "–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè", "type": "text", "color": "secondary", "payload": "1"},
            ],
            [
                {"label": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé", "type": "text", "color": "secondary", "payload": "1"},
            ],
            [
                {"label": "–ü–æ–∏—Å–∫ üîé", "type": "text", "color": "primary", "payload": "1"},
                {"label": "–î—Ä—É–≥–æ–µ ‚ö°", "type": "text", "color": "primary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_commands():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    keyboard = Keyboard(one_time=False)
    keyboard.schema(
        [
            [
                {"label": "–ê–≤—Ç–æ—Ä—ã", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "type": "text", "color": "secondary", "payload": "1"},
                {"label": "–ö–∞—Ä—Ç–∞", "type": "text", "color": "secondary", "payload": "1"},
            ],
            [
                {"label": "<==–ù–∞–∑–∞–¥", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_extra():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é - –î—Ä—É–≥–æ–µ"""
    keyboard = Keyboard(one_time=False)
    keyboard.schema(
        [
            [
                {"label": "–ü–æ–º–æ—â—å", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£", "type": "text", "color": "secondary", "payload": "1"},
            ],
            [
                {"label": "<==–ù–∞–∑–∞–¥", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_nearlesson():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ """
    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="–¢–µ–∫—É—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.add(Text(label="–°–ª–µ–¥—É—é—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    keyboard.schema(
        [
            [
                {"label": "–¢–µ–∫—É—â–∞—è", "type": "text", "color": "primary", "payload": "1"},
                {"label": "–°–ª–µ–¥—É—é—â–∞—è", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "<==–ù–∞–∑–∞–¥", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_inline_keyboard_set_notifications(time=0):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π """

    if time != 0:
        text_check = f'{time} –º–∏–Ω'
    else:
        text_check = 'off'

    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="-"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.add(Text(label=text_check), color=KeyboardButtonColor.PRIMARY)
    # keyboard.add(Text(label='+'), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), color=KeyboardButtonColor.SECONDARY)
    keyboard.schema(
        [
            [
                {"label": "-", "type": "text", "color": "primary", "payload": "1"},
                {"label": f"{text_check}", "type": "text", "color": "primary", "payload": "1"},
                {"label": "+", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_institutes(institutes=[]):
    """ –ö–ª–∞–≤–∏—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ """

    keyboard = {
        "one_time": False
    }
    list_keyboard = []
    list_keyboard_main = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'primary'))
    list_keyboard_main.append(list_keyboard)
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name']) + ' ...'
        else:
            name = institute['name']

        if name == '–ë–∞–π–∫–∞–ª—å—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –ë–†–ò–ö–°':
            continue

        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ """

    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    list_keyboard = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', 'primary'))
    list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """ –ö–ª–∞–≤–∏—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã """

    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π """

    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_schedule():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ """

    keyboard = Keyboard(one_time=False)
    keyboard.schema(
        [
            [
                {"label": "–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", "type": "text", "color": "primary", "payload": "1"},
                {"label": "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–≠–∫–∑–∞–º–µ–Ω—ã", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )

    return keyboard

def make_keyboard_choose_schedule_for_aud_search():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ """

    keyboard = Keyboard(one_time=False)
    keyboard.schema(
        [
            [
                {"label": "–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", "type": "text", "color": "primary", "payload": "1"},
                {"label": "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )

    return keyboard

def make_keyboard_search_group(page, search_result=[]):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ """

    keyboard = {
        "one_time": False
    }

    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in search_result:
        if type(search_result[0]) == dict:
            group = group['search']
        overflow += 1
        if overflow == 25:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            if page == 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
            elif page > 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
                list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary')])

        else:
            if overflow < 26:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 26 and page > 1:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)

    elif overflow < 26:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_main_menu():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é """

    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.schema(
        [
            [
                {"label": "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "type": "text", "color": "primary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def make_keyboard_search():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ """

    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label="–ê—É–¥–∏—Ç–æ—Ä–∏–∏"), color=KeyboardButtonColor.PRIMARY)
    # keyboard.row()
    # keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.schema(
        [
            [
                {"label": "–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "type": "text", "color": "primary", "payload": "1"},
            ],
            [
                {"label": "–ê—É–¥–∏—Ç–æ—Ä–∏–∏", "type": "text", "color": "secondary", "payload": "1"},
            ],
            [
                {"label": "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", "type": "text", "color": "secondary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def back_for_prep():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π """

    keyboard = Keyboard(one_time=False)
    # keyboard.row()
    # keyboard.add(Text(label="–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º"), color=KeyboardButtonColor.PRIMARY)
    keyboard.schema(
        [
            [
                {"label": "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º", "type": "text", "color": "primary", "payload": "1"},
            ]
        ]
    )
    return keyboard


def sep_space(name):
    """ –û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ """

    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name
